{"version":3,"sources":["App.js","Components/Test.js","Components/Intro.js","serviceWorker.js","index.js"],"names":["App","className","Test","color","dialogue","sceneIndex","name","image","useState","sceneList","indexOf","filter","x","pop","nextScene","input","setInput","ans","setAns","index","setIndex","redirect","setRedirect","Grid","columns","style","backgroundColor","stackable","Column","width","overflow","Image","size","src","wrapped","ui","verticalAlign","textAlign","fontWeight","fontSize","text","Divider","hidden","Row","paddingRight","paddingLeft","Input","onChange","e","target","value","placeholder","marginTop","Button","height","inverted","onClick","length","to","path","Intro","val","setVal","success","setSuccess","type","Boolean","window","location","hostname","match","d","d2","Purple","Orange","render","ReactDOM","StrictMode","basename","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1841eb1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Button } from 'semantic-ui-react'\nimport { Link } from \"react-router-dom\";\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header>\n      <h1> Halloween 2020 </h1>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport { Button, Image, Divider, Grid, Input } from 'semantic-ui-react'\nimport { Redirect } from \"react-router-dom\";\nimport { sceneList } from \"../index\"\n\nconst Test = ({ color, dialogue, sceneIndex, image, name }) => {\n\n    const findNextScene = () => {\n        if (sceneIndex) return sceneIndex\n\n        return sceneList.indexOf(sceneList.filter(x => x.name === name).pop()) + 1\r\n    }\n\n    const [nextScene, setNextScene] = useState(findNextScene())\n    const [input, setInput] = useState(dialogue[0].input)\n    const [ans, setAns] = useState(\"\")\n\n    const [index, setIndex] = useState(0)\n    const [redirect, setRedirect] = useState(false)\n\n    const handleClick = () => {\n\n        if (input && ans !== dialogue[index].input) {\n            return\n        }\n\n        if (index + 2 > dialogue.length) {\r\n            if (nextScene < sceneList.length) {\r\n                setRedirect(true)\r\n            }\r\n        } else {\r\n            if (dialogue[index + 1].input) {\r\n                setInput(true)\r\n            } else {\r\n                setInput(false)\r\n            }\r\n\r\n            setIndex(index + 1)\r\n        }\r\n    }\n\n    return (<div className=\"Center\">\n        <Grid className=\"dialogue\" columns=\"2\" style={{ backgroundColor: color }} stackable>\n            <Grid.Column style={{ width:\"300px\", overflow: \"hidden\"}}>\n                    <Image size=\"small\" src='https://64.media.tumblr.com/21697b9bdde288c814fd0aab7211bd03/9d79f4b579da3f7a-10/s1280x1920/63ae306f7ede934935bc7447b6e818c3670617f5.jpg' wrapped ui={false} />\n          </Grid.Column>\n          <Grid.Column width=\"12\" verticalAlign=\"middle\" textAlign=\"left\">\n                <div style={{ color: \"white\", fontWeight: \"bold\", fontSize: \"Large\" }}>\n                    <p>{dialogue[index].text}</p>\n                </div>\n                <Divider hidden />\n            </Grid.Column>\n\n            <Grid.Row>\n                <Grid.Column width=\"100\">\n                    <div width=\"100%\" style={{ textAlign: \"right\", paddingRight: \"20px\", paddingLeft: \"20px\" }}>\n                    {input && <Input className=\"answer\" onChange={(e) => setAns(e.target.value)} style={{ paddingRight: \"10px\", width:\"100%\" }} placeholder={\"Write answer\"} />}\n                    </div>\n                </Grid.Column>\n            </Grid.Row>\n\n            <Grid.Row>\n                <Grid.Column></Grid.Column>\n                <Grid.Column>\n                    <div width=\"100%\" style={{ textAlign: \"right\", marginTop: \"-30px\", paddingRight: \"20px\", paddingLeft: \"20px\" }}>\n                        <Button style={{width:\"100%\", height:\"50px\"}} color=\"black\" size=\"large\" inverted onClick={handleClick}> Next </Button>\n                    </div>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n        {redirect && <Redirect to={sceneList[nextScene].path} />}\n    </div>\n  );\n}\n\n/* \n *    <Card primary>\n      <Image src='https://64.media.tumblr.com/21697b9bdde288c814fd0aab7211bd03/9d79f4b579da3f7a-10/s1280x1920/63ae306f7ede934935bc7447b6e818c3670617f5.jpg' wrapped ui={false} />\n      <Card.Content>\n        <Card.Header>The Skeleton</Card.Header>\n              <Divider/>\n        <Card.Description>\n        <p>Happy Halloween! Are you ready for spooks?</p>\n        <p>You better be ready for a lot!</p>\n        </Card.Description>\n      </Card.Content>\n    </Card> */\n\nexport default Test;\n","import React, {useState} from 'react';\nimport { Button, Input, Divider, Form } from 'semantic-ui-react'\nimport { Link, Redirect } from \"react-router-dom\";\n\nconst Intro = () => {\n\tconst secretCode = 12345\n\n\tconst [val, setVal] = useState(\"\")\n\tconst [success, setSuccess] = useState(false)\n\n\tconst onSubmit = () => {\n\t\tif (val == secretCode) {\n\t\t\tsetSuccess(true)\n\t\t}\n\t}\n\n\tconst onChange = (e) => {\n\t\tsetVal(e.target.value)\n\t}\n\n  return (\n    <div className=\"App\">\n    <Divider/>\n      <h1>WELCOME</h1>\n      <Divider hidden/>\n        <div><input onChange={onChange} placeholder='Input Code' /></div>\n        <Divider hidden style={{marginTop:\"-3px\"}}/>\n        <Button className=\"default\" onClick={onSubmit} type=\"submit\">Click Here</Button>\n\t\t{ success && <Redirect to={\"/test\"}/> }\n    </div>\n  );\n}\n\nexport default Intro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport Test from './Components/Test';\r\nimport Intro from './Components/Intro';\r\nimport 'semantic-ui-less/semantic.less'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst paths = {witch:\"/witch\", skeleton:\"/skeleton\", ghost: \"/ghost\"}\r\n\r\nconst d = [{text:'Heeeeeeeeeey its HALLOWEEEEEEEEEEEEEEN', input:\"potato\"}, {text:\"halloweenoweenoweeeen\"}, {text:\"SKELETONS\", input:\"test\"}, {text:\"k bye\"}]\r\nconst d2 = [{text:'ITS SPOOKS TIME'}, {text:\"ORANGE PUMPKINS!!\"}, {text:\"SKELETONS\"}, {text:\"THE END\"}]\r\n\r\nconst Purple = () => <Test dialogue={d} name=\"Skeleton\" sceneIndex={0} color=\"#6A0888\"/>\r\nconst Orange = () => <Test dialogue={d2} name=\"OrangeSkeleton\" color=\"orange\"/>\r\n\r\nexport const sceneList = [\r\n  {name:\"Skeleton\", render:Purple, path:\"/test\"},\r\n  {name:\"OrangeSkeleton\", render:Orange, path:\"/test2\"}\r\n]\r\n\r\n//basename={window.location.pathname || ''}\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  <BrowserRouter className=\"App\" basename={\"halloween2020\"}>\r\n      <App/>\r\n\t  <Route exact path=\"/\" component={Intro} />\r\n\t  <Route exact path=\"/test\" component={Purple} />\r\n    <Route exact path=\"/test2\" component={Orange} />\r\n    <Route exact path={paths.witch} component={Orange} />    \r\n  </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}