{"version":3,"sources":["App.js","Components/MonsterPanel.js","Components/WitchHaunt.js","Components/Intro.js","serviceWorker.js","index.js"],"names":["InfoModal","title","content","useState","open","setOpen","Modal","className","centered","onClose","onOpen","trigger","style","backgroundColor","color","padding","height","width","Header","textAlign","Content","paddingBottom","marginTop","Ability","text","Magic","Undead","CodeModal","setCode","Input","onChange","e","target","value","placeholder","Divider","hidden","App","getCode","setopen","modalOpen","setModalOpen","code","setUndead","menuItems","Menu","secondary","marginBottom","position","paddingTop","fontSize","Item","icon","onClick","Transition","Group","animation","top","zIndex","borderless","vertical","fluid","Dimmer","Dimmable","dimmed","as","active","onClickOutside","MonsterPanel","dialogue","sceneIndex","name","image","sceneList","indexOf","filter","x","pop","nextScene","input","setInput","ans","setAns","index","setIndex","redirect","setRedirect","margin","Grid","columns","stackable","Column","overflow","Image","size","src","wrapped","ui","verticalAlign","fontWeight","Row","paddingRight","paddingLeft","Button","inverted","length","to","path","WitchHaunt","fade","end","panic","dark","console","log","vis","setVis","pIn","setpIn","darkText","setDarkText","DisplayPanic","setTimeout","lines","Array","from","slice","map","line","i","l","disp","idx","DisplayDark","lineHeight","visible","duration","Intro","val","setVal","success","setSuccess","type","Boolean","window","location","hostname","match","paths","d","d2","Purple","Orange","Zombie","Witch2","render","RenderRoutes","StrictMode","basename","exact","component","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.51ddabe8.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport { Button, Dropdown, Menu, Transition, Dimmer, Modal, Divider, Input } from 'semantic-ui-react'\nimport { Link } from \"react-router-dom\";\n\nconst InfoModal = ({title, content}) => {\n\tconst [open, setOpen] = useState(false)\n\treturn <Modal\n\t  className=\"glow\"\n\t  centered={false}\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      open={open}\n      trigger={<div style={{ backgroundColor:\"black\", color:\"white\", padding:\"10px\"}} height=\"100%\" width=\"100%\">{title}</div>}\n    >\n      <Modal.Header style={{ textAlign:\"center\", backgroundColor:\"black\", color:\"white\"}}>{title}</Modal.Header>\n      <Modal.Content style={{paddingBottom:\"10xp\", backgroundColor:\"black\", color:\"white\"}}>\n      {content}\n      <p style={{color:\"grey\", marginTop:\"10px\"}}>Certain ablilities are not always applicable. (When in doubt, please ask!) If you make a mistake, a mysterious power will right things.</p>\n      <p style={{color:\"grey\"}}> Remember to keep your abilities secret from the other team before you use them! </p>\n      </Modal.Content>\n    </Modal>\n}\n\nconst Ability = ({text}) => <p><center><b><u>{text}</u></b></center></p>\n\nconst Magic = [\n\t<InfoModal title=\"Werewolf\" content={<div>\n\t\t<Ability text=\"Ability: Werewolf Bite\"/>\n\t\t<p>Biting someone is a wager.</p>\n\t\t<p>If you earn more points than them during the round, the bite will be successful and you will get 20% of their points for the round</p>\n\t\t<p>If you earn fewer points then the bite is unsuccessful and they get 20% of your points.</p>\n\t\t</div>}/>,\n\t\t\t<InfoModal title=\"Vampire\" content={<div>\n\t\t<Ability text=\"Ability: Night Vision\"/>\n\t\t<p>Vampires have strong night vision and can see in darkness.</p>\n\t\t<p>Do the task with your eyes closed and choose a member on the other team to do the same.</p>\n\t\t</div>}/>,\n\t\t\t<InfoModal title=\"Witch/Wizard\" content={<div>\n\t\t<Ability text=\"Ability: Cast a Spell\"/>\n\t\t<p>Witches/wizards have the ability to cast a spell on a teammate to give them an advantage, or on an opponent to give them a disadvantage, for the round.</p>\n\t\t<p>Casting spells come at a price! When a witch/wizard casts a spell, they must take the disadvantage for that round.</p>\n\t\t</div>}/>\n]\n\nconst Undead = [\n\t<InfoModal title=\"Ghost\" content={<div>\n\t\t<Ability text=\"Ability: Resurrection\"/>\n\t\t<p>Ghosts have the ability to bring teammates back to life.</p>\n\t\t<p>Choose a teammate to give a second chance at the task. They will keep all their points from both tries.</p>\n\t\t<p>A soul for a soul: You must also ressurect an enemy team member to do the same.</p>\n\t\t<p style={{color:\"grey\"}}>hint: You can choose the best of your team and the worst of theirs to have a second chance.</p>\n\t\t</div>}/>,\n\t\t\t<InfoModal title=\"Zombie\" content={<div>\n\t\t<Ability text=\"Ability: Use your Brains\"/>\n\t\t<p> Zombies eat a lot of brains. So much that it can't all fit in their heads!</p>\n\t\t<p> Zombies can choose to make someone balance a brain on their head for the duration of the task.</p>\n\t\t<p> The zombie must also balance the brain during the task. </p>\n\t\t</div>}/>,\n\t\t\t<InfoModal title=\"Skeleton\" content={<div>\n\t\t<Ability text=\"Ability: Limb Detachement\"/>\n\t\t<p> Skeletons are able to detach and reattach limbs as they please.</p>\n\t\t<p> Skeletons can remove a limb from an enemy team member for the duration of the task (remove meaning they cannot use this limb. Ie- right arm, left leg.)</p>\n\t\t<p> They must also remove the same limb from themselves. If desired, they can remove multiple limbs.</p>\n\t\t</div>}/>\n]\n\nconst CodeModal = ({setCode, open}) => {\n\t\tconst onChange = (e) => {\n\t\tsetCode(e.target.value)\n\t}\n\n\treturn <Modal\n\t  className=\"glow\"\n\t  centered={false}\n      open={open}\n    >\n      <Modal.Header style={{ textAlign:\"center\", backgroundColor:\"black\", color:\"white\"}}>Input Identity Code</Modal.Header>\n      <Modal.Content style={{paddingBottom:\"10xp\", backgroundColor:\"black\", color:\"white\"}}>\n        <div style={{textAlign:\"center\"}}><Input className=\"white\" onChange={onChange} placeholder='Input Code' /></div>\n        <Divider hidden style={{marginTop:\"-3px\"}}/>\n\n      </Modal.Content>\n    </Modal>\n}\n\nconst App = ({getCode}) => {\n  const undeadCode = \"undead123\"\n  const mysticCode = \"magic123\"\n\n  const [open, setopen] = useState(false)\n  const [modalOpen, setModalOpen] = useState(true)\n  const [code, setCode] = useState(\"\")\n  const [undead, setUndead] = useState(false)\n\n  const toggleMenu = () => setopen(!open)\n  const closeMenu = () =>  setopen(false)\n\n  const menuItems = code === undeadCode ? Undead : code === mysticCode ? Magic : []\n\n  const handleCode = (code) => {\n  \tsetCode(code)\n  \tif (code === undeadCode) {\n  \t\tsetUndead(true)\n  \t\tgetCode(\"undead\")\n  \t\tsetModalOpen(false)\n  \t}\n  \tif (code === mysticCode) {\n  \t\tsetUndead(false)\n  \t\tgetCode(\"magic\")\n  \t\tsetModalOpen(false)\n  \t}\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n      <CodeModal open={modalOpen} setCode={handleCode}/>\n\t\t<Menu secondary style={{ marginTop: 0, marginBottom: 0 }}>\n\t\t\t<Menu.Menu position=\"right\">\n    \t      <div style={{paddingTop:\"20px\", fontSize:\"20px\"}} className=\"header\">\n    \t\t\t  Halloween 2020\n\t      \t</div>\n\t\t\t</Menu.Menu>\n            <Menu.Item position=\"right\" style={{ color: \"white\" }} icon=\"bars\" onClick={toggleMenu} />\n        </Menu>\n    \t  <Transition.Group animation=\"slide down\">\n                { open &&\n                    <div style={{ position:\"absolute\", top: \"56px\", width:\"100%\", zIndex: 999 }}>\n                        <Menu borderless position=\"right\" vertical fluid>\n                        \t{menuItems}\n                        </Menu>\n                    </div>\n                }\n            </Transition.Group>\n            <Transition.Group animation=\"fade\">\n                { open &&\n                    <Dimmer.Dimmable dimmed as=\"div\" style={{ position: \"absolute\", top: \"50px\", width: \"100%\", zIndex: 998, height: \"100vh\" }}>\n                        <Dimmer active onClickOutside={closeMenu} />\n                    </Dimmer.Dimmable>\n                }\n            </Transition.Group>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport { Button, Image, Divider, Grid, Input } from 'semantic-ui-react'\nimport { Redirect } from \"react-router-dom\";\nimport { sceneList } from \"../index\"\n\n// TODO - back button\nconst MonsterPanel = ({ color, dialogue, sceneIndex, image, name, code }) => {\n\n    const findNextScene = () => {\n        if (sceneIndex) return sceneIndex\n\n        return sceneList.indexOf(sceneList.filter(x => x.name === name).pop()) + 1\n    }\n\n    const [nextScene, setNextScene] = useState(findNextScene())\n    const [input, setInput] = useState(dialogue[0].input)\n    const [ans, setAns] = useState(\"\")\n\n    const [index, setIndex] = useState(0)\n    const [redirect, setRedirect] = useState(false)\n\n    const handleClick = () => {\n\n        if (input && ans !== dialogue[index].input) {\n            return\n        }\n\n        if (index + 2 > dialogue.length) {\n            if (nextScene < sceneList.length) {\n                setRedirect(true)\n            }\n        } else {\n            if (dialogue[index + 1].input) {\n                setInput(true)\n            } else {\n                setInput(false)\n            }\n\n            setIndex(index + 1)\n        }\n    }\n\n    return (<div style={{ margin: \"10px\" }} className=\"Center\">\n        <Grid className=\"dialogue\" columns=\"2\" style={{ backgroundColor: color }} stackable>\n            <Grid.Column style={{ width:\"300px\", overflow: \"hidden\"}}>\n                    <Image size=\"small\" src='https://64.media.tumblr.com/21697b9bdde288c814fd0aab7211bd03/9d79f4b579da3f7a-10/s1280x1920/63ae306f7ede934935bc7447b6e818c3670617f5.jpg' wrapped ui={false} />\n          </Grid.Column>\n          <Grid.Column width=\"12\" verticalAlign=\"middle\" textAlign=\"left\">\n                <div style={{ color: \"white\", fontWeight: \"bold\", fontSize: \"Large\" }}>\n                    <p>{dialogue[index].text}</p>\n                </div>\n                <Divider hidden />\n            </Grid.Column>\n\n            <Grid.Row textAlign=\"center\" >\n                <Grid.Column textAlign=\"center\" width=\"100%\">\n                    <div width=\"100%\" style={{ textAlign: \"right\", paddingRight: \"20px\", paddingLeft: \"20px\" }}>\n                    {input && <Input className=\"answer\" onChange={(e) => setAns(e.target.value)} style={{ width:\"100%\" }} placeholder={\"Write answer\"} />}\n                    </div>\n                </Grid.Column>\n            </Grid.Row>\n\n            <Grid.Row>\n                <Grid.Column></Grid.Column>\n                <Grid.Column>\n                    <div width=\"100%\" style={{ textAlign: \"right\", marginTop: \"-30px\", paddingRight: \"20px\", paddingLeft: \"20px\" }}>\n                        <Button style={{width:\"100%\", height:\"50px\"}} color=\"black\" size=\"large\" inverted onClick={handleClick}> Next </Button>\n                    </div>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n        {redirect && <Redirect to={sceneList[nextScene].path} />}\n    </div>\n  );\n}\n\n/* \n *    <Card primary>\n      <Image src='https://64.media.tumblr.com/21697b9bdde288c814fd0aab7211bd03/9d79f4b579da3f7a-10/s1280x1920/63ae306f7ede934935bc7447b6e818c3670617f5.jpg' wrapped ui={false} />\n      <Card.Content>\n        <Card.Header>The Skeleton</Card.Header>\n              <Divider/>\n        <Card.Description>\n        <p>Happy Halloween! Are you ready for spooks?</p>\n        <p>You better be ready for a lot!</p>\n        </Card.Description>\n      </Card.Content>\n    </Card> */\n\nexport default MonsterPanel;\n","import React, { useState } from 'react';\nimport { Button, Image, Divider, Grid, Input, Transition } from 'semantic-ui-react'\nimport { Redirect } from \"react-router-dom\";\nimport { sceneList } from \"../index\"\n\nconst WitchHaunt = ({ color=\"purple\", sceneIndex, image=\"https://i.etsystatic.com/5573407/r/il/e4bbd8/2338843113/il_570xN.2338843113_n9iw.jpg\", name }) => {\n\n    const DarkPanel = () => {\n        return \"\"\n    }\n\n    const findNextScene = () => {\n        if (sceneIndex) return sceneIndex\n\n        return sceneList.indexOf(sceneList.filter(x => x.name === name).pop()) + 1\n    }\n\n    const dialogue = [{text:\"Hey frenz\"},{text:\"Things are crazy\"},{text:\"But it's gonne be okay!\"},{text:\"Here's what you have to do: first you have to find a lamp.\", fade:true}, {text:\"\", end:true}]\n\n    const darkImg = \"https://upload.wikimedia.org/wikipedia/commons/6/6c/Black_photo.jpg\"\n\n    const panic = \"Wait Z What's happening? Z STOP Z HELP Z AAAAAAAAAAAAA Z AAAAAAAAAAAAAAAAAAA Z AAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAA\"\n    const dark = [\"DO NOT INTERFERE IN OUR AFFAIRS\", \"IF YOU DO NOT LISTEN WE WILL FIND YOU\", \"WE WILL END YOU\", \" \"]\n\n    const [nextScene, setNextScene] = useState(findNextScene())\n\n    console.log(nextScene)\n    const [input, setInput] = useState(dialogue[0].input)\n    const [ans, setAns] = useState(\"\")\n\n    const [index, setIndex] = useState(0)\n    const [redirect, setRedirect] = useState(false)\n\n    const [vis, setVis] = useState(true)\n    const [pIn, setpIn] = useState(0)\n\n    const [darkText, setDarkText] = useState(\"\")\n\n    const handleClick = () => {\n\n        if (vis) {\n\n            if (input && ans !== dialogue[index].input) {\n                return\n            }\n\n            if (index + 2 > dialogue.length) {\n                if (nextScene < sceneList.length) {\n                    setRedirect(true)\n                }\n            } else {\n                if (dialogue[index + 1].input) {\n                    setInput(true)\n                } else {\n                    setInput(false)\n                }\n\n                setIndex(index + 1)\n\n            if (dialogue[index + 1].fade) {\n                setVis(false)\n            }\n\n            }\n        }\n    }\n\n    const DisplayPanic = () => {\n\n        const nextWord = () => {\n            setpIn(pIn+1)\n       }\n\n        if (!vis && pIn < panic.length) {\n            setTimeout(nextWord, pIn === 0 ? 1000 : 50)\n        }\n\n        const lines = Array.from(panic).slice(0, pIn)\n\n        const disp = (l,i) => {\n            if (l===\"Z\")\n                return <div index={i}/>\n            else return l\n        }\n\n        return <div>\n            {lines.map((line,i) => disp(line,i) )}\n        </div>\n    }\n\n    const DisplayDark = () => {\n        const idx = dark.indexOf(darkText) || 0\n\n        const nextWord = () => {\n            setDarkText(dark[idx+1])\n            setIndex(dialogue.length-1)\n       }\n\n        if (!vis && pIn >= panic.length && idx < dark.length) {\n            setTimeout(nextWord, 5000)\n        }\n\n        if (!vis && idx >= dark.length-1) {\n            setVis(true)\n        }\n    }    \n\n    DisplayDark()\n\n    return (<div style={{ margin: \"10px\" }} className=\"Center\">\n        {!vis && <div className=\"darkText\" style={{color:\"red\", lineHeight:\"100px\", textAlign:\"center\", fontSize:\"100px\"}}>{darkText}</div>}\n        <Transition visible={vis} animation='fade' duration={10000}>\n        <Grid className=\"dialogue\" columns=\"2\" style={{ backgroundColor: color }} stackable>\n            <Grid.Column style={{ width:\"300px\", overflow: \"hidden\"}}>\n                    <Image size=\"small\" src={dialogue[index].end ? darkImg : image} wrapped ui={false} />\n          </Grid.Column>\n          <Grid.Column width=\"12\" verticalAlign=\"middle\" textAlign=\"left\">\n                <div style={{ color: \"white\", fontWeight: \"bold\", fontSize: \"Large\" }}>\n                    <p>{dialogue[index].text}</p>\n                    {!vis && <DisplayPanic/>}\n                </div>\n                <Divider hidden />\n            </Grid.Column>\n\n            <Grid.Row textAlign=\"center\" >\n                <Grid.Column textAlign=\"center\" width=\"100\">\n                    <div width=\"100%\" style={{ textAlign: \"right\", paddingRight: \"20px\", paddingLeft: \"20px\" }}>\n                    {input && <Input className=\"answer\" onChange={(e) => setAns(e.target.value)} style={{ width:\"100%\" }} placeholder={\"Write answer\"} />}\n                    </div>\n                </Grid.Column>\n            </Grid.Row>\n\n            <Grid.Row>\n                <Grid.Column></Grid.Column>\n                <Grid.Column>\n                    <div width=\"100%\" style={{ textAlign: \"right\", marginTop: \"-80px\", paddingRight: \"20px\", paddingLeft: \"20px\" }}>\n                        <Button style={{width:\"100%\", height:\"50px\", paddingBottom:\"30px\"}} color=\"black\" size=\"large\" inverted onClick={handleClick}> Next </Button>\n                    </div>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n        </Transition>\n        {redirect && <Redirect to={sceneList[nextScene].path} />}\n    </div>\n  );\n}\n\nexport default WitchHaunt;\n","import React, {useState} from 'react';\nimport { Button, Input, Divider, Form } from 'semantic-ui-react'\nimport { Link, Redirect } from \"react-router-dom\";\nimport {sceneList} from \"../index\"\n\nconst Intro = () => {\n\tconst secretCode = 12345\n\n\tconst [val, setVal] = useState(\"\")\n\tconst [success, setSuccess] = useState(false)\n\n\tconst onSubmit = () => {\n\t\tif (val == secretCode) {\n\t\t\tsetSuccess(true)\n\t\t}\n\t}\n\n\tconst onChange = (e) => {\n\t\tsetVal(e.target.value)\n\t}\n\n  return (\n    <div className=\"App\">\n    <Divider/>\n      <h1>WELCOME</h1>\n      <h2>ARE YOU READY FOR SPOOKS?</h2>\n      <p>It is time... for your destiny</p>\n      <Divider hidden/>\n        <div><Input className=\"white\" onChange={onChange} placeholder='Input Code' /></div>\n        <Divider hidden style={{marginTop:\"-3px\"}}/>\n        <Button className=\"default\" onClick={onSubmit} type=\"submit\">Click Here</Button>\n\t\t{ success && <Redirect to={sceneList[0].path} sceneIndex={0}/> }\n    </div>\n  );\n}\n\nexport default Intro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport MonsterPanel from './Components/MonsterPanel';\r\nimport WitchHaunt from './Components/WitchHaunt';\r\nimport Intro from './Components/Intro';\r\nimport 'semantic-ui-less/semantic.less'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst paths = {witch:\"/witch\", skeleton:\"/skeleton\", ghost: \"/ghost\", purple:\"/test1\", orange:\"/test2\", witchHaunt:\"/witch2\", zombie: \"/zombie\"}\r\n\r\nconst d = [{text:'Heeeeeeeeeey its HALLOWEEEEEEEEEEEEEEN', input:\"potato\"}, {text:\"halloweenoweenoweeeen\"}, {text:\"SKELETONS\", input:\"test\"}, {text:\"k bye\"}]\r\nconst d2 = [{text:'ITS SPOOKS TIME'}, {text:\"ORANGE PUMPKINS!!\"}, {text:\"SKELETONS\"}, {text:\"THE END\"}]\r\n\r\nconst Purple = (code) => () => <MonsterPanel code={code} dialogue={d} name=\"Skeleton\" sceneIndex={0} color=\"#6A0888\"/>\r\nconst Orange = (code) => () => <MonsterPanel code={code} dialogue={d2} name=\"OrangeSkeleton\" color=\"orange\"/>\r\nconst Zombie = (code) => () => <MonsterPanel code={code} dialogue={d2} name=\"Zombie\" color=\"green\"/>\r\nconst Witch2 = (code) => () => <WitchHaunt code={code} name=\"WitchHaunt\" color=\"#630700\"/>\r\n\r\nexport const sceneList = [\r\n  {name:\"Skeleton\", render:Purple, path: paths.purple},\r\n  {name:\"OrangeSkeleton\", render:Orange, path: paths.orange},\r\n  {name:\"WitchHaunt\", render:Witch2, path: paths.witchHaunt},\r\n  {name:\"Zombie\", render: Zombie, path: paths.zombie},\r\n]\r\n\r\nconst RenderRoutes = () => {\r\n  const [code, getCode] = useState(\"\")\r\n\r\nreturn <React.StrictMode>\r\n  <BrowserRouter className=\"App\" basename={\"halloween2020\"}>\r\n    <App getCode={getCode}/>\r\n    <Route exact path=\"/\" component={Intro} />\r\n    <Route exact path={paths.purple} component={Purple(code)} />\r\n    <Route exact path={paths.orange} component={Orange(code)} />\r\n    <Route exact path={paths.witch} component={Orange(code)} />\r\n    <Route exact path={paths.witchHaunt} component={Witch2(code)} />\r\n    <Route exact path={paths.zombie} component={Zombie(code)} />\r\n  </BrowserRouter>\r\n  </React.StrictMode>\r\n}\r\n\r\n//basename={window.location.pathname || ''}\r\nReactDOM.render(\r\n  <RenderRoutes/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}