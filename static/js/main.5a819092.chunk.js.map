{"version":3,"sources":["App.js","Components/Test.js","Components/WitchHaunt.js","Components/Intro.js","serviceWorker.js","index.js"],"names":["App","className","Test","color","dialogue","sceneIndex","name","image","useState","sceneList","indexOf","filter","x","pop","nextScene","input","setInput","ans","setAns","index","setIndex","redirect","setRedirect","style","margin","Grid","columns","backgroundColor","stackable","Column","width","overflow","Image","size","src","wrapped","ui","verticalAlign","textAlign","fontWeight","fontSize","text","Divider","hidden","Row","paddingRight","paddingLeft","Input","onChange","e","target","value","placeholder","marginTop","Button","height","inverted","onClick","length","to","path","WitchHaunt","fade","end","panic","dark","console","log","vis","setVis","pIn","setpIn","darkText","setDarkText","DisplayPanic","setTimeout","lines","Array","from","slice","map","line","i","l","disp","idx","DisplayDark","lineHeight","Transition","visible","animation","duration","paddingBottom","Intro","val","setVal","success","setSuccess","type","Boolean","window","location","hostname","match","paths","d","d2","Purple","Orange","Zombie","Witch2","render","ReactDOM","StrictMode","basename","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5a819092.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Button } from 'semantic-ui-react'\nimport { Link } from \"react-router-dom\";\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header>\n      <h1> Halloween 2020 </h1>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport { Button, Image, Divider, Grid, Input } from 'semantic-ui-react'\nimport { Redirect } from \"react-router-dom\";\nimport { sceneList } from \"../index\"\n\nconst Test = ({ color, dialogue, sceneIndex, image, name }) => {\n\n    const findNextScene = () => {\n        if (sceneIndex) return sceneIndex\n\n        return sceneList.indexOf(sceneList.filter(x => x.name === name).pop()) + 1\r\n    }\n\n    const [nextScene, setNextScene] = useState(findNextScene())\n    const [input, setInput] = useState(dialogue[0].input)\n    const [ans, setAns] = useState(\"\")\n\n    const [index, setIndex] = useState(0)\n    const [redirect, setRedirect] = useState(false)\n\n    const handleClick = () => {\n\n        if (input && ans !== dialogue[index].input) {\n            return\n        }\n\n        if (index + 2 > dialogue.length) {\r\n            if (nextScene < sceneList.length) {\r\n                setRedirect(true)\r\n            }\r\n        } else {\r\n            if (dialogue[index + 1].input) {\r\n                setInput(true)\r\n            } else {\r\n                setInput(false)\r\n            }\r\n\r\n            setIndex(index + 1)\r\n        }\r\n    }\n\n    return (<div style={{ margin: \"10px\" }} className=\"Center\">\n        <Grid className=\"dialogue\" columns=\"2\" style={{ backgroundColor: color }} stackable>\n            <Grid.Column style={{ width:\"300px\", overflow: \"hidden\"}}>\n                    <Image size=\"small\" src='https://64.media.tumblr.com/21697b9bdde288c814fd0aab7211bd03/9d79f4b579da3f7a-10/s1280x1920/63ae306f7ede934935bc7447b6e818c3670617f5.jpg' wrapped ui={false} />\n          </Grid.Column>\n          <Grid.Column width=\"12\" verticalAlign=\"middle\" textAlign=\"left\">\n                <div style={{ color: \"white\", fontWeight: \"bold\", fontSize: \"Large\" }}>\n                    <p>{dialogue[index].text}</p>\n                </div>\n                <Divider hidden />\n            </Grid.Column>\n\n            <Grid.Row textAlign=\"center\" >\n                <Grid.Column textAlign=\"center\" width=\"100\">\n                    <div width=\"100%\" style={{ textAlign: \"right\", paddingRight: \"20px\", paddingLeft: \"20px\" }}>\n                    {input && <Input className=\"answer\" onChange={(e) => setAns(e.target.value)} style={{ width:\"100%\" }} placeholder={\"Write answer\"} />}\n                    </div>\n                </Grid.Column>\n            </Grid.Row>\n\n            <Grid.Row>\n                <Grid.Column></Grid.Column>\n                <Grid.Column>\n                    <div width=\"100%\" style={{ textAlign: \"right\", marginTop: \"-30px\", paddingRight: \"20px\", paddingLeft: \"20px\" }}>\n                        <Button style={{width:\"100%\", height:\"50px\"}} color=\"black\" size=\"large\" inverted onClick={handleClick}> Next </Button>\n                    </div>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n        {redirect && <Redirect to={sceneList[nextScene].path} />}\n    </div>\n  );\n}\n\n/* \n *    <Card primary>\n      <Image src='https://64.media.tumblr.com/21697b9bdde288c814fd0aab7211bd03/9d79f4b579da3f7a-10/s1280x1920/63ae306f7ede934935bc7447b6e818c3670617f5.jpg' wrapped ui={false} />\n      <Card.Content>\n        <Card.Header>The Skeleton</Card.Header>\n              <Divider/>\n        <Card.Description>\n        <p>Happy Halloween! Are you ready for spooks?</p>\n        <p>You better be ready for a lot!</p>\n        </Card.Description>\n      </Card.Content>\n    </Card> */\n\nexport default Test;\n","import React, { useState } from 'react';\nimport { Button, Image, Divider, Grid, Input, Transition } from 'semantic-ui-react'\nimport { Redirect } from \"react-router-dom\";\nimport { sceneList } from \"../index\"\n\nconst WitchHaunt = ({ color=\"purple\", sceneIndex, image=\"https://i.etsystatic.com/5573407/r/il/e4bbd8/2338843113/il_570xN.2338843113_n9iw.jpg\", name }) => {\n\n    const DarkPanel = () => {\n        return \"\"\n    }\n\n    const findNextScene = () => {\n        if (sceneIndex) return sceneIndex\n\n        return sceneList.indexOf(sceneList.filter(x => x.name === name).pop()) + 1\n    }\n\n    const dialogue = [{text:\"Hey frenz\"},{text:\"Things are crazy\"},{text:\"But it's gonne be okay!\"},{text:\"Here's what you have to do: first you have to find a lamp.\", fade:true}, {text:\"\", end:true}]\n\n    const darkImg = \"https://upload.wikimedia.org/wikipedia/commons/6/6c/Black_photo.jpg\"\n\n    const panic = \"Wait Z What's happening? Z STOP Z HELP Z AAAAAAAAAAAAA Z AAAAAAAAAAAAAAAAAAA Z AAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAA\"\n    const dark = [\"DO NOT INTERFERE IN OUR AFFAIRS\", \"IF YOU DO NOT LISTEN WE WILL FIND YOU\", \"WE WILL END YOU\", \" \"]\n\n    const [nextScene, setNextScene] = useState(findNextScene())\n\n    console.log(nextScene)\n    const [input, setInput] = useState(dialogue[0].input)\n    const [ans, setAns] = useState(\"\")\n\n    const [index, setIndex] = useState(0)\n    const [redirect, setRedirect] = useState(false)\n\n    const [vis, setVis] = useState(true)\n    const [pIn, setpIn] = useState(0)\n\n    const [darkText, setDarkText] = useState(\"\")\n\n    const handleClick = () => {\n\n        if (vis) {\n\n            if (input && ans !== dialogue[index].input) {\n                return\n            }\n\n            if (index + 2 > dialogue.length) {\n                if (nextScene < sceneList.length) {\n                    setRedirect(true)\n                }\n            } else {\n                if (dialogue[index + 1].input) {\n                    setInput(true)\n                } else {\n                    setInput(false)\n                }\n\n                setIndex(index + 1)\n\n            if (dialogue[index + 1].fade) {\n                setVis(false)\n            }\n\n            }\n        }\n    }\n\n    const DisplayPanic = () => {\n\n        const nextWord = () => {\n            setpIn(pIn+1)\n       }\n\n        if (!vis && pIn < panic.length) {\n            setTimeout(nextWord, pIn === 0 ? 1000 : 50)\n        }\n\n        const lines = Array.from(panic).slice(0, pIn)\n\n        const disp = (l,i) => {\n            if (l===\"Z\")\n                return <div index={i}/>\n            else return l\n        }\n\n        return <div>\n            {lines.map((line,i) => disp(line,i) )}\n        </div>\n    }\n\n    const DisplayDark = () => {\n        const idx = dark.indexOf(darkText) || 0\n\n        const nextWord = () => {\n            setDarkText(dark[idx+1])\n            setIndex(dialogue.length-1)\n       }\n\n        if (!vis && pIn >= panic.length && idx < dark.length) {\n            setTimeout(nextWord, 5000)\n        }\n\n        if (!vis && idx >= dark.length-1) {\n            setVis(true)\n        }\n    }    \n\n    DisplayDark()\n\n    return (<div style={{ margin: \"10px\" }} className=\"Center\">\n        {!vis && <div className=\"darkText\" style={{color:\"red\", lineHeight:\"100px\", textAlign:\"center\", fontSize:\"100px\"}}>{darkText}</div>}\n        <Transition visible={vis} animation='fade' duration={10000}>\n        <Grid className=\"dialogue\" columns=\"2\" style={{ backgroundColor: color }} stackable>\n            <Grid.Column style={{ width:\"300px\", overflow: \"hidden\"}}>\n                    <Image size=\"small\" src={dialogue[index].end ? darkImg : image} wrapped ui={false} />\n          </Grid.Column>\n          <Grid.Column width=\"12\" verticalAlign=\"middle\" textAlign=\"left\">\n                <div style={{ color: \"white\", fontWeight: \"bold\", fontSize: \"Large\" }}>\n                    <p>{dialogue[index].text}</p>\n                    {!vis && <DisplayPanic/>}\n                </div>\n                <Divider hidden />\n            </Grid.Column>\n\n            <Grid.Row textAlign=\"center\" >\n                <Grid.Column textAlign=\"center\" width=\"100\">\n                    <div width=\"100%\" style={{ textAlign: \"right\", paddingRight: \"20px\", paddingLeft: \"20px\" }}>\n                    {input && <Input className=\"answer\" onChange={(e) => setAns(e.target.value)} style={{ width:\"100%\" }} placeholder={\"Write answer\"} />}\n                    </div>\n                </Grid.Column>\n            </Grid.Row>\n\n            <Grid.Row>\n                <Grid.Column></Grid.Column>\n                <Grid.Column>\n                    <div width=\"100%\" style={{ textAlign: \"right\", marginTop: \"-80px\", paddingRight: \"20px\", paddingLeft: \"20px\" }}>\n                        <Button style={{width:\"100%\", height:\"50px\", paddingBottom:\"30px\"}} color=\"black\" size=\"large\" inverted onClick={handleClick}> Next </Button>\n                    </div>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n        </Transition>\n        {redirect && <Redirect to={sceneList[nextScene].path} />}\n    </div>\n  );\n}\n\nexport default WitchHaunt;\n","import React, {useState} from 'react';\nimport { Button, Input, Divider, Form } from 'semantic-ui-react'\nimport { Link, Redirect } from \"react-router-dom\";\nimport {sceneList} from \"../index\"\n\nconst Intro = () => {\n\tconst secretCode = 12345\n\n\tconst [val, setVal] = useState(\"\")\n\tconst [success, setSuccess] = useState(false)\n\n\tconst onSubmit = () => {\n\t\tif (val == secretCode) {\n\t\t\tsetSuccess(true)\n\t\t}\n\t}\n\n\tconst onChange = (e) => {\n\t\tsetVal(e.target.value)\n\t}\n\n  return (\n    <div className=\"App\">\n    <Divider/>\n      <h1>WELCOME</h1>\n      <h2>ARE YOU READY FOR SPOOKS?</h2>\n      <p>It is time... for your destiny</p>\n      <Divider hidden/>\n        <div><Input className=\"white\" onChange={onChange} placeholder='Input Code' /></div>\n        <Divider hidden style={{marginTop:\"-3px\"}}/>\n        <Button className=\"default\" onClick={onSubmit} type=\"submit\">Click Here</Button>\n\t\t{ success && <Redirect to={sceneList[0].path} sceneIndex={0}/> }\n    </div>\n  );\n}\n\nexport default Intro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport Test from './Components/Test';\r\nimport WitchHaunt from './Components/WitchHaunt';\r\nimport Intro from './Components/Intro';\r\nimport 'semantic-ui-less/semantic.less'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst paths = {witch:\"/witch\", skeleton:\"/skeleton\", ghost: \"/ghost\", purple:\"/test1\", orange:\"/test2\", witchHaunt:\"/witch2\", zombie: \"/zombie\"}\r\n\r\nconst d = [{text:'Heeeeeeeeeey its HALLOWEEEEEEEEEEEEEEN', input:\"potato\"}, {text:\"halloweenoweenoweeeen\"}, {text:\"SKELETONS\", input:\"test\"}, {text:\"k bye\"}]\r\nconst d2 = [{text:'ITS SPOOKS TIME'}, {text:\"ORANGE PUMPKINS!!\"}, {text:\"SKELETONS\"}, {text:\"THE END\"}]\r\n\r\nconst Purple = () => <Test dialogue={d} name=\"Skeleton\" sceneIndex={0} color=\"#6A0888\"/>\r\nconst Orange = () => <Test dialogue={d2} name=\"OrangeSkeleton\" color=\"orange\"/>\r\nconst Zombie = () => <Test dialogue={d2} name=\"Zombie\" color=\"green\"/>\r\nconst Witch2 = () => <WitchHaunt name=\"WitchHaunt\" color=\"#630700\"/>\r\n\r\nexport const sceneList = [\r\n  {name:\"Skeleton\", render:Purple, path: paths.purple},\r\n  {name:\"OrangeSkeleton\", render:Orange, path: paths.orange},\r\n  {name:\"WitchHaunt\", render:Witch2, path: paths.witchHaunt},\r\n  {name:\"Zombie\", render: Zombie, path: paths.zombie},\r\n]\r\n\r\n//basename={window.location.pathname || ''}\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  <BrowserRouter className=\"App\" basename={\"halloween2020\"}>\r\n      <App/>\r\n\t  <Route exact path=\"/\" component={Intro} />\r\n\t  <Route exact path={paths.purple} component={Purple} />\r\n    <Route exact path={paths.orange} component={Orange} />\r\n    <Route exact path={paths.witch} component={Orange} />\r\n    <Route exact path={paths.witchHaunt} component={Witch2} />\r\n    <Route exact path={paths.zombie} component={Zombie} />\r\n  </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}